//Listing 1 Reference architecture  
open System

//Different kinds of events generated by the view represented as cases in discriminated union
type UpDownEvent = Incr | Decr  
//A view abstracted as an event stream                                   
type View = IObservable<UpDownEvent>    
//A sample model that holds a single field, State. Defined as F# record. Immutable.            
type Model = { State : int }   
//Controller is function that takes the model,  and event and returns a new model. For simplicity think of Controller as an event handler.                                      
type Controller = Model -> UpDownEvent -> Model  
//Mvc is a function that applies the Controller function to each event of the stream, threading an model argument through the computation.                         
type Mvc  = Controller -> Model -> View -> Model     

